1.消息是否消费成功，签收模式的设置
2.消息的不均匀消费
3.消息重发的设置，包括重发超时，重发次数等
4.虚拟destination
5.activemq的异步发送消息
6.生产者控流
7.失效转移

Activemq进阶：

1.消息是否消费成功，签收模式的设置：
    1、AUTO_ACKNOWLEDGE = 1    自动确认
    2、CLIENT_ACKNOWLEDGE = 2    客户端手动确认
    3、DUPS_OK_ACKNOWLEDGE = 3    自动批量确认
    4、SESSION_TRANSACTED = 0    事务提交并确认
    5、INDIVIDUAL_ACKNOWLEDGE = 4    单条消息确认（自定义ACK_MODE）
注意：如果此session为事务类型,用户指定的ACK_MODE将被忽略,而强制使用"SESSION_TRANSACTED"类型;如果session非事务类型时,也将不能将 ACK_MODE设定为"SESSION_TRANSACTED"
解决方案：设置签收模式为手动签收模式
一般使用（CLIENT_ACKNOWLEDGE）

代码：
第一种:
jmsTemplate.setConnectionFactory(connectionFactory);
jmsTemplate.setSessionAcknowledgeMode(Session.CLIENT_ACKNOWLEDGE);
第二种：
<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
     <property name="connectionFactory" ref="connectionFactory"></property>
     <property name="defaultDestination" ref="destination"></property>
     <property name="messageConverter" ref="jmsMessageConverter"></property>
     <property name="sessionAcknowledgeMode" value="2" />
     这样设置是无效的，就是当设置sessionAcknowledgeMode为2时，虽然是客户端手动确认，但是却被spring自动确认了，造成设置无效。这时只需要把sessionAcknowledgeMode的值设置成activemq自定义的类型INDIVIDUAL_ACKNOWLEDGE = 4即可。
</bean>
第三种：
String brokerUrl = "tcp://localhost:61616?" +
                   "jms.optimizeAcknowledge=true" +
                   "&jms.optimizeAcknowledgeTimeOut=30000" +
                   "&jms.redeliveryPolicy.maximumRedeliveries=6";
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUrl);


2.消息的不均匀消费
ActiveMQ的prefetch机制。当消费者去获取消息时，不会一条一条去获取，而是一次性获取一批，默认是1000条。这些预获取的消息，在还没确认消费之前，在管理控制台还是可以看见这些消息的，但是不会再分配给其他消费者，此时这些消息的状态应该算作“已分配未消费”，如果消息最后被消费，则会在服务器端被删除，如果消费者崩溃，则这些消息会被重新分配给新的消费者。但是如果消费者既不消费确认，又不崩溃，那这些消息就永远躺在消费者的缓存区里无法处理。更通常的情况是，消费这些消息非常耗时，你开了10个消费者去处理，结果发现只有一台机器吭哧吭哧处理，另外9台啥事不干。
解决方案：如果消费者单次耗时大，生产量少，就把预读量设小，如果单次耗时小，生产量多，就把预读量设大。

代码：
第一种：
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory（）;
Properties props = new Properties（）;
props.setProperty（"prefetchPolicy.queuePrefetch"， "1000"）;
props.setProperty（"prefetchPolicy.queueBrowserPrefetch"， "500"）;
props.setProperty（"prefetchPolicy.durableTopicPrefetch"， "100"）;
props.setProperty（"prefetchPolicy.topicPrefetch"， "32766"）;
factory.setProperties（props）;
第二种：
Queue queue =
  new ActiveMQQueue（"TEST.QUEUE？consumer.prefetchSize=10"）;
MessageConsumer consumer = session.createConsumer（queue）;



3.消息重发的设置，包括重发超时，重发次数等
以下情况会导致消息重发:
1．在使用事务的Session中，调用rollback()方法；
2．在使用事务的Session中，调用commit()方法之前就关闭了Session;
3．在Session中使用CLIENT_ACKNOWLEDGE签收模式或者INDIVIDUAL_ACKNOWLEDGE模式，并且调用了recover()方法。
可以通过设置ActiveMQConnectionFactory来定制想要的再次传送策略。

ActiveMQ的重发策略（Redelivery Policy）自定义配置，其中的配置参数主要有以下几个：
可用的属性
 属性 默认值 说明
l  collisionAvoidanceFactor  默认值0.15 ,  设置防止冲突范围的正负百分比，只有启用useCollisionAvoidance参数时才生效。
l  maximumRedeliveries  默认值6 ,  最大重传次数，达到最大重连次数后抛出异常。为-1时不限制次数，为0时表示不进行重传。
l  maximumRedeliveryDelay  默认值-1,  最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。
l  initialRedeliveryDelay  默认值1000L,  初始重发延迟时间
l  redeliveryDelay  默认值1000L,  重发延迟时间，当initialRedeliveryDelay=0时生效（v5.4）
l  useCollisionAvoidance  默认值false,  启用防止冲突功能，因为消息接收时是可以使用多线程并发处理的，应该是为了重发的安全性，避开所有并发线程都在同一个时间点进行消息接收处理。所有线程在同一个时间点处理时会发生什么问题呢？应该没有问题，只是为了平衡broker处理性能，不会有时很忙，有时很空闲。
l  useExponentialBackOff  默认值false,  启用指数倍数递增的方式增加延迟时间。
l  backOffMultiplier  默认值5,  重连时间间隔递增倍数，只有值大于1和启用useExponentialBackOff参数时才生效。

解决方案：设置重新投递策略

代码：
<!-- 定义ReDelivery(重发机制)机制 ，重发时间间隔是100毫秒，最大重发次数是3次 http://www.kuqin.com/shuoit/20140419/339344.html -->
    <bean id="activeMQRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <!--是否在每次尝试重新发送失败后,增长这个等待时间 -->
        <property name="useExponentialBackOff" value="true"></property>
        <!--重发次数,默认为6次   这里设置为1次 -->
        <property name="maximumRedeliveries" value="1"></property>
        <!--重发时间间隔,默认为1秒 -->
        <property name="initialRedeliveryDelay" value="1000"></property>
        <!--第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value -->
        <property name="backOffMultiplier" value="2"></property>
        <!--最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第
            二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。 -->
        <property name="maximumRedeliveryDelay" value="1000"></property>
    </bean>
    <!--创建连接工厂 -->
    <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"></property>
        <property name="redeliveryPolicy" ref="activeMQRedeliveryPolicy" />  <!-- 引用重发机制 -->
    </bean>

4.虚拟destination
    1.组合队列Composite Destinations ： 允许用一个虚拟的destination代表多个destinations,这样就可以通过composite destinations在一个操作中同时向多个queue/topic发送消息。
解决方案：
有两种实现方式：
　　　　第一种:在客户端编码实现
　　　　第二种：在activemq.xml配置文件中实现
    Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);
     Destination destination = session.createQueue("my-queue1,my-queue2");
   2.虚拟Destinations实现消费者分组与简单路由
   虚拟主题（Virtual Topics）
问题：
1.  同一应用内consumer端负载均衡的问题：同一个应用上的一个持久订阅不能使用多个consumer来共同承担消息处理功能。因为每个都会获取所有消息。queue模式可以解决这个问题，broker端又不能将消息发送到多个应用端。所以，既要发布订阅，又要让消费者分组，这个功能jms规范本身是没有的。

2.  同一应用内consumer端failover的问题：由于只能使用单个的持久订阅者，如果这个订阅者出错，则应用就无法处理消息了，系统的健壮性不高。



5.activemq的异步发送消息



6.生产者控流
控的目的在于防止在将ActiveMQ作为内存MQ使用时，生产速度大于消费速度时将MQ撑爆的问题。

broker配置中的系统内存和磁盘空间使用量（activemq.xml）
memoryUsage:   amq使用内存大小，照amq论坛上说，这个值应该大于所有durable desitination设置的(20M)
storeUsage:   kaha数据存储大小，如果设置不足，性能会下降到1个1个发(1G)
tempUsage:   非persistent的消息存储在temp区域(100M)

        默认情况下，没有配置producerSystemUsage 和 consumerSystemUsage，则生产者和消费者都使用systemUsage。 导致生产者单方面使用率过大后，消费者方能使用的内存就会不足。
问题：splitSystemUsageForProducersConsumers导致消费缓慢甚至无法消费的问题
解决方案：
在broker上设置splitSystemUsageForProducersConsumers=”true”，使得生产者线程和消费者线程各使用各的内存。
默认是 生产者线程内存：消费者线程内存 = 6:4。
也可以通过如下两个参数设置生产者线程内存和消费者线程内存各一半：
producerSystemUsagePortion = 50
consumerSystemUsagePortion = 50
注意 producerSystemUsagePortion和consumerSystemUsagePortion配置需要在splitSystemUsageForProducersConsumers = true时生效
代码：
软件配置（activemq.xml）：
         <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsagelimit="64 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsagelimit="100 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsagelimit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

<broker xmlns="http://activemq.apache.org/schema/core" brokerName="xxxx" dataDirectory="${activemq.data}" useJmx="true" schedulerSupport="false" splitSystemUsageForProducersConsumers="true" producerSystemUsagePortion =50 consumerSystemUsagePortion =50>


7.失效转移